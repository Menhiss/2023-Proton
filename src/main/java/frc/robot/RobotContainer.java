// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command.InterruptionBehavior;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj2.command.RunCommand;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import frc.robot.subsystems.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final CameraSubsystem m_cameraSubsystem = new CameraSubsystem();
    public final GripperSubsystem m_gripperSubsystem = new GripperSubsystem();
    public final ArmSubsystem m_armSubsystem = new ArmSubsystem();
    public final DrivingSubsystem m_drivingSubsystem = new DrivingSubsystem();

// Joysticks
private final XboxController xboxController1 = new XboxController(0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
    // Configure the button bindings
    configureButtonBindings();

    m_drivingSubsystem.setDefaultCommand(
      new RunCommand(() -> m_drivingSubsystem.differentialDrive.tankDrive(xboxController1.getRawAxis(Constants.LeftYAxis), 
      xboxController1.getRawAxis(Constants.RightYAxis)), m_drivingSubsystem)); 
    // SmartDashboard Buttons
    SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

    m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public XboxController getXboxController1() {
        return xboxController1;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  
  public void drive() {
    XboxController controller1 = getXboxController1();

    boolean turboEngaged = controller1.getLeftStickButton();
    double speedFactor = (turboEngaged) ? Constants.turboDriveSpeedFactor : Constants.slowDriveSpeedFactor;
    double LeftJoystickPos = controller1.getRawAxis(Constants.LeftYAxis);
    double RightJoystickPos = controller1.getRawAxis(Constants.RightYAxis);

    // if (Math.abs(LeftJoystickPos - RightJoystickPos) < Constants.joystickMatchTolerance) {
    //   RightJoystickPos = LeftJoystickPos;
    // }

    m_drivingSubsystem.drive(LeftJoystickPos, RightJoystickPos, speedFactor);
  }

  public void Arm() {
    XboxController controller1 = getXboxController1();
    double RightTrigger = controller1.getRightTriggerAxis();
    double LeftTrigger = controller1.getLeftTriggerAxis();

    if(RightTrigger > 0) {
      m_armSubsystem.ArmUp();
    } else if(LeftTrigger > 0) {
      m_armSubsystem.ArmDown();
    } else {
      m_armSubsystem.Stop();
    }
  }

}

