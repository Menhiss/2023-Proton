// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import frc.robot.Constants;
import frc.robot.PowerCurve;


public class ArmSubsystem extends SubsystemBase {
    private WPI_TalonFX armMotorController;
    private double powerExp = 2.5;
   
    public ArmSubsystem() {
        armMotorController = new WPI_TalonFX(Constants.ArmMotorID);
        armMotorController.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative,
        Constants.armEncoderPIDLoopIndex, Constants.armEncoderTimeoutMs);
        armMotorController.setSensorPhase(true);

        // todo: set F,K,P,I,D!
        armMotorController.config_kF(Constants.armEncoderPIDLoopIndex,0.0, Constants.armEncoderTimeoutMs);
        armMotorController.config_kP(Constants.armEncoderPIDLoopIndex,0.0, Constants.armEncoderTimeoutMs);
        armMotorController.config_kI(Constants.armEncoderPIDLoopIndex,0.0, Constants.armEncoderTimeoutMs);
        armMotorController.config_kD(Constants.armEncoderPIDLoopIndex,0.0, Constants.armEncoderTimeoutMs);
        addChild("ArmMotorController", armMotorController);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void drive(double motorSpeed, double speedFactor){
        armMotorController.set(PowerCurve.getPoint(motorSpeed, powerExp) * 0.5);
    }

}

