// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.Constants;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.motorcontrol.PWMTalonSRX;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DrivingSubsytem extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private PWMTalonSRX leftFrontMotor;
private PWMTalonSRX leftRearMotor;
private MotorControllerGroup leftMotorController;
private PWMTalonSRX rightFrontMotor;
private PWMTalonSRX rightRearMotor;
private MotorControllerGroup rightMotorController;
private DifferentialDrive differentialDrive;
private AnalogGyro gyroscope;

 public DrivingSubsytem() {
    leftFrontMotor = new PWMTalonSRX(Constants.LeftFrontMotorID);
    addChild("LeftFrontMotor",leftFrontMotor);
    leftFrontMotor.setInverted(false);

    leftRearMotor = new PWMTalonSRX(Constants.LeftRearMotorID);
    addChild("LeftRearMotor",leftRearMotor);
    leftRearMotor.setInverted(false);

    leftMotorController = new MotorControllerGroup(leftFrontMotor, leftRearMotor  );
    addChild("LeftMotorController",leftMotorController);
 

    rightFrontMotor = new PWMTalonSRX(Constants.RightFrontMotorID);
    addChild("RightFrontMotor",rightFrontMotor);
    rightFrontMotor.setInverted(false);

    rightRearMotor = new PWMTalonSRX(Constants.RightRearMotorID);
    addChild("RightRearMotor",rightRearMotor);
    rightRearMotor.setInverted(false);

    rightMotorController = new MotorControllerGroup(rightFrontMotor, rightRearMotor  );
    addChild("RightMotorController",rightMotorController);
    

    differentialDrive = new DifferentialDrive(leftMotorController, leftFrontMotor);
    addChild("DifferentialDrive",differentialDrive);
    differentialDrive.setSafetyEnabled(true);
    differentialDrive.setExpiration(0.1);
    differentialDrive.setMaxOutput(1.0);


    gyroscope = new AnalogGyro(1);
    addChild("Gyroscope",gyroscope);
    gyroscope.setSensitivity(0.007);


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
     
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    public void drive(double LeftMotorSpeed, double RightMotorSpeed) {
        System.out.print("Left Motor Speed Equals"+LeftMotorSpeed);
        differentialDrive.tankDrive(LeftMotorSpeed, RightMotorSpeed);
    }

}

