// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.subsystems.DrivingSubsystem;
import edu.wpi.first.wpilibj.Timer;



/**
 *
 // Bob's notes:
 // TODO: I don't think we need the PIDController, as we are using the internal Talon controller.
 // - based 2019 bot code for the racks
 */
public class DriveStraightCommand extends CommandBase {
    private final DrivingSubsystem m_drivingSubsystem;
    double m_direction = 1; //1 is forward -1 is reversed
    private double m_speed;
    private final Timer m_timer = new Timer(); 
    private double m_time;  
    
    public DriveStraightCommand(DrivingSubsystem drivingSubsystem, double speed, double time, boolean isReversed) {
        m_drivingSubsystem = drivingSubsystem;
        m_time = time;
        m_speed = speed;
        m_direction = isReversed ? -1.0 : 1.0;
        addRequirements(m_drivingSubsystem);
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {

    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        double speed = -m_speed * m_direction;
        m_drivingSubsystem.drive(speed, speed, 1);
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        m_drivingSubsystem.drive(0, 0, 0);
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        boolean isFinished = (m_timer.get() > m_time);
        return isFinished;
    }

    @Override
    public boolean runsWhenDisabled() {
        return false;
    }
}
